generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "nativeDistinct"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id String @id @default(cuid())

  teams TeamMember[]
  todos Todo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Todo {
  id String @id @default(cuid())

  content   String
  completed Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Waitlist {
  id String @id @default(cuid())

  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  ADMIN
  MEMBER
}

model Team {
  id   String  @id @default(cuid())
  slug String  @unique
  name String?

  members TeamMember[]
  invites TeamMemberInvite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([slug])
}

model TeamMember {
  role Role

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model TeamMemberInvite {
  id    String @id @default(cuid())
  code  String @unique
  email String
  role  Role

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([teamId, email])
  @@index([teamId])
}
