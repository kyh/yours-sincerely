// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataproxy", "referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?

  // Profile Details
  displayName  String?
  displayImage String?

  // User Settings
  weeklyDigestEmail Boolean @default(false)

  // Account Settings
  role         UserRole  @default(USER)
  accounts     Account[]
  passwordHash String?

  tokens    Token[]
  posts     Post[]
  likes     Like[]
  flags     Flag[]
  blockedBy Block[] @relation(name: "blocking")
  blocking  Block[] @relation(name: "blocker")

  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}

model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token, type])
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}

model Post {
  id        String  @id @default(cuid())
  content   String  @db.Text
  createdBy String?

  likes Like[]
  flags Flag[]

  parentId String?
  parent   Post?   @relation(name: "comments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments Post[]  @relation(name: "comments")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId])
}

model Like {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
}

model Flag {
  comment  String?
  resolved Boolean @default(false)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
}

model Block {
  blockerId String
  blocker   User   @relation(name: "blocker", fields: [blockerId], references: [id], onUpdate: NoAction)

  blockingId String
  blocking   User   @relation(name: "blocking", fields: [blockingId], references: [id], onUpdate: NoAction)

  @@id([blockerId, blockingId])
  @@index([blockerId])
  @@index([blockingId])
}

model Prompt {
  id      String @id @default(cuid())
  content String @db.Text
}
