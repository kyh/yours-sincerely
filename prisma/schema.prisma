generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                String    @id @default(cuid())
  email             String?   @unique
  emailVerified     DateTime?
  passwordHash      String?
  displayName       String?
  displayImage      String?
  disabled          Boolean?
  weeklyDigestEmail Boolean   @default(false)

  role UserRole @default(USER)

  accounts       Account[]
  tokens         Token[]
  posts          Post[]
  likes          Like[]
  flags          Flag[]
  blockedBy      Block[]         @relation("blocking")
  blocking       Block[]         @relation("blocker")
  enrolledEvents EnrolledEvent[]

  createdAt DateTime @default(now())
}

model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Post {
  id            String  @id @default(cuid())
  content       String  @db.Text
  createdBy     String?
  baseLikeCount Int?

  likes    Like[]
  flags    Flag[]
  comments Post[] @relation("comments")

  parentId String?
  parent   Post?   @relation("comments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId])
  @@index([userId])
  @@index([parentId])
}

model Like {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Flag {
  comment  String?
  resolved Boolean @default(false)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Block {
  blockerId  String
  blocker    User   @relation("blocker", fields: [blockerId], references: [id], onUpdate: NoAction)
  blockingId String
  blocking   User   @relation("blocking", fields: [blockingId], references: [id], onUpdate: NoAction)

  @@id([blockerId, blockingId])
  @@index([blockerId])
  @@index([blockingId])
}

model Prompt {
  id      String @id @default(cuid())
  content String @db.Text
}

model EnrolledEvent {
  id     String   @id @default(cuid())
  name   String
  slug   String
  start  DateTime @default(now())
  end    DateTime
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}
