// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?

  accounts     Account[]
  passwordHash String?

  role   UserRole @default(USER)
  tokens Token[]

  posts Post[]

  likes Like[]
  flags Flag[]

  blockedBy Block[] @relation("blocker")
  blocking  Block[] @relation("blocking")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Token {
  id          String    @id @default(cuid())
  hashedToken String
  type        TokenType
  expiresAt   DateTime?
  sentTo      String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hashedToken, type])
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_PASSWORD
  RESET_PASSWORD
}

model Post {
  id        String  @id @default(cuid())
  content   String
  createdBy String?

  likes Like[]
  flags Flag[]

  // rootId String? @unique
  // root   Post?   @relation(name: "root", fields: [rootId], references: [id])
  // child  Post?   @relation(name: "root")

  parentId String?
  parent   Post?   @relation(name: "comments", fields: [parentId], references: [id])
  comments Post[]  @relation(name: "comments")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
}

model Flag {
  comment  String?
  resolved Boolean @default(false)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
}

model Block {
  blocker   User   @relation(name: "blocker", fields: [blockerId], references: [id])
  blockerId String

  blocking   User   @relation(name: "blocking", fields: [blockingId], references: [id])
  blockingId String

  @@id([blockerId, blockingId])
}
