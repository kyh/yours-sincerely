// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?

  accounts     Account[]
  passwordHash String?

  role   UserRole @default(USER)
  tokens Token[]

  posts    Post[]
  comments Comment[]
  likes    Like[]
  flags    Flag[]
  // blocks    Block[]   @relation(name: "UserBlocks")
  // blockedBy Block[]   @relation(name: "UserBlockedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Token {
  id          String    @id @default(cuid())
  hashedToken String
  type        TokenType
  expiresAt   DateTime?
  sentTo      String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hashedToken, type])
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_PASSWORD
  RESET_PASSWORD
}

model Post {
  id      String @id @default(cuid())
  content String

  comments Comment[]
  likes    Like[]
  flags    Flag[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(cuid())
  content String

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(cuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flag {
  id String @id @default(cuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Block {
//   id String @id @default(cuid())

//   blockUserId String
//   blockUser   User   @relation(name: "UserBlocks", fields: [blockUserId], references: [id], onDelete: Cascade)

//   userId String
//   user   User   @relation(name: "UserBlockedBy", fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
