@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 10% 60%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }

  /* 
  * We are using rehype-pretty to style the code blocks in the project.
  * rehype-pretty-code is a Rehype plugin powered by the shiki syntax highlighter that provides beautiful code blocks for Markdown or MDX. 
  * It works on both the server at build-time (avoiding runtime syntax highlighting) and on the client for dynamic highlighting.
  * @see: https://rehype-pretty.pages.dev/
  */

  /* 
  * Here we are setting up the styles needed to enable theme-aware code blocks.
  * @see: https://rehype-pretty.pages.dev/#multiple-themes-dark-and-light-mode
  */
  html {
    code[data-theme*=" "],
    code[data-theme*=" "] span {
      color: var(--shiki-light);
      background-color: var(--shiki-light-bg);
    }

    &.dark {
      code[data-theme*=" "],
      code[data-theme*=" "] span {
        color: var(--shiki-dark);
        background-color: var(--shiki-dark-bg);
      }
    }
  }

  /* 
  * Here we are setting up the styles needed to enable line numbers in code blocks.
  * @see: https://rehype-pretty.pages.dev/#line-numbers
  */
  html {
    code[data-line-numbers] {
      counter-reset: line;
    }

    code[data-line-numbers] > [data-line]::before {
      display: inline-block;
      width: 12px;
      margin-right: 2rem;
      color: gray;
      text-align: right;
      content: counter(line);
      counter-increment: line;
    }

    code[data-line-numbers-max-digits="2"] > [data-line]::before {
      width: 1.25rem;
    }

    code[data-line-numbers-max-digits="3"] > [data-line]::before {
      width: 1.75rem;
    }

    code[data-line-numbers-max-digits="4"] > [data-line]::before {
      width: 2.25rem;
    }

    p [data-line] {
      padding: 2px 4px;
      margin-right: 2px;
      margin-left: 2px;
      text-align: center;
      background-color: var(--kbd-background) !important;
      border-radius: 4px;
      box-shadow: 0 0 0 1px var(--kbd-border);
    }
  }

  /* 
  * Here we are just some additional styles to make the code blocks look better.
  * @see: https://rehype-pretty.pages.dev/#styles
  */
  * {
    pre {
      padding: 16px;
      overflow-x: auto;
      font-size: 12px;

      [data-line] {
        margin-top: 0 !important;
      }
    }

    figure {
      width: 100%;
      margin-top: 4px;
      border: 1px solid var(--border);
      border-radius: var(--radius-base);
    }
  }
}

.page-layout {
  --header-height: 80px;
  --left-column-width: 200px;
  --right-column-width: 300px;

  display: grid;
  grid-template-areas:
    "content-header aside-header"
    "content content";
  grid-template-columns: auto;
  grid-template-rows: var(--header-height) auto;
}

.area-nav-header {
  grid-area: nav-header;
  position: sticky;
  top: 0;
  display: none;
}

.area-nav {
  grid-area: nav;
  position: sticky;
  top: var(--header-height);
  align-self: start;
  height: calc(100dvh - var(--header-height));
  display: none;
}

.area-content-header {
  grid-area: content-header;
  position: sticky;
  top: 0;
  background-color: hsl(var(--background));
}

.area-content {
  grid-area: content;
}

.area-aside-header {
  grid-area: aside-header;
  position: sticky;
  top: 0;
  background-color: hsl(var(--background));
}

.area-aside {
  grid-area: aside;
  position: sticky;
  top: var(--header-height);
  align-self: start;
  height: calc(100dvh - var(--header-height));
  display: none;
}

@media (min-width: 768px) {
  .page-layout {
    grid-template-areas:
      "nav-header content-header aside-header"
      "nav content content";
    grid-template-columns: var(--left-column-width) auto;
  }

  .area-nav-header,
  .area-nav {
    display: flex;
    margin-right: 2rem;
  }
}

@media (min-width: 1024px) {
  .page-layout {
    grid-template-areas:
      "nav-header content-header aside-header"
      "nav content aside";
    grid-template-columns: var(--left-column-width) auto var(
        --right-column-width
      );
    column-gap: 4rem;
  }

  .area-aside {
    display: flex;
  }
}

.textarea-grow {
  display: grid;
}

.textarea-grow::after {
  content: attr(data-textarea-value) " ";
  white-space: pre-wrap;
  visibility: hidden;
}

.textarea-grow > textarea {
  resize: none;
  overflow: hidden;
}

.textarea-grow > textarea,
.textarea-grow::after {
  grid-area: 1 / 1 / 2 / 2;
  font-size: 1.125rem;
  line-height: 1.75rem;
  background: transparent;
  outline: 2px solid transparent;
  outline-offset: 2px;
  min-height: 120px;
}
